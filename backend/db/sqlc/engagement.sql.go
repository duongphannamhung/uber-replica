// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: engagement.sql

package db

import (
	"context"
	"database/sql"
)

const createEngagement = `-- name: CreateEngagement :one
INSERT INTO engagements (
    driver_id,
    name,
    vehicle_id,
    label,
    model,
    color,
    license_plate
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, driver_id, status, in_trip, vehicle_id, name, label, model, color, license_plate, latitude, longitude, geofence_id, created_at
`

type CreateEngagementParams struct {
	DriverID     int32  `json:"driver_id"`
	Name         string `json:"name"`
	VehicleID    int32  `json:"vehicle_id"`
	Label        string `json:"label"`
	Model        string `json:"model"`
	Color        string `json:"color"`
	LicensePlate string `json:"license_plate"`
}

func (q *Queries) CreateEngagement(ctx context.Context, arg CreateEngagementParams) (Engagement, error) {
	row := q.db.QueryRowContext(ctx, createEngagement,
		arg.DriverID,
		arg.Name,
		arg.VehicleID,
		arg.Label,
		arg.Model,
		arg.Color,
		arg.LicensePlate,
	)
	var i Engagement
	err := row.Scan(
		&i.ID,
		&i.DriverID,
		&i.Status,
		&i.InTrip,
		&i.VehicleID,
		&i.Name,
		&i.Label,
		&i.Model,
		&i.Color,
		&i.LicensePlate,
		&i.Latitude,
		&i.Longitude,
		&i.GeofenceID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEngagement = `-- name: DeleteEngagement :exec

DELETE FROM engagements
WHERE id = $1
`

// -- name: UpdateDriverInfo :one
// UPDATE engagements
// SET name = $2,
//
//	vehicle_id = $3,
//	label = $4,
//	model = $5,
//	color = $6,
//	license_plate = $7
//
// WHERE id = $1
// RETURNING *;
func (q *Queries) DeleteEngagement(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEngagement, id)
	return err
}

const getActiveEngagementInGeoWithVehicle = `-- name: GetActiveEngagementInGeoWithVehicle :one
SELECT id, driver_id, status, in_trip, vehicle_id, name, label, model, color, license_plate, latitude, longitude, geofence_id, created_at FROM engagements
WHERE geofence_id = $1 
AND status = 2 
AND vehicle_id = $2
LIMIT 1
`

type GetActiveEngagementInGeoWithVehicleParams struct {
	GeofenceID sql.NullInt32 `json:"geofence_id"`
	VehicleID  int32         `json:"vehicle_id"`
}

func (q *Queries) GetActiveEngagementInGeoWithVehicle(ctx context.Context, arg GetActiveEngagementInGeoWithVehicleParams) (Engagement, error) {
	row := q.db.QueryRowContext(ctx, getActiveEngagementInGeoWithVehicle, arg.GeofenceID, arg.VehicleID)
	var i Engagement
	err := row.Scan(
		&i.ID,
		&i.DriverID,
		&i.Status,
		&i.InTrip,
		&i.VehicleID,
		&i.Name,
		&i.Label,
		&i.Model,
		&i.Color,
		&i.LicensePlate,
		&i.Latitude,
		&i.Longitude,
		&i.GeofenceID,
		&i.CreatedAt,
	)
	return i, err
}

const getDriverInfo = `-- name: GetDriverInfo :one
SELECT driver_id,
    name,
    label,
    model,
    color,
    license_plate
FROM engagements
WHERE driver_id = $1
AND vehicle_id = $2
`

type GetDriverInfoParams struct {
	DriverID  int32 `json:"driver_id"`
	VehicleID int32 `json:"vehicle_id"`
}

type GetDriverInfoRow struct {
	DriverID     int32  `json:"driver_id"`
	Name         string `json:"name"`
	Label        string `json:"label"`
	Model        string `json:"model"`
	Color        string `json:"color"`
	LicensePlate string `json:"license_plate"`
}

func (q *Queries) GetDriverInfo(ctx context.Context, arg GetDriverInfoParams) (GetDriverInfoRow, error) {
	row := q.db.QueryRowContext(ctx, getDriverInfo, arg.DriverID, arg.VehicleID)
	var i GetDriverInfoRow
	err := row.Scan(
		&i.DriverID,
		&i.Name,
		&i.Label,
		&i.Model,
		&i.Color,
		&i.LicensePlate,
	)
	return i, err
}

const getEngagement = `-- name: GetEngagement :one
SELECT id, driver_id, status, in_trip, vehicle_id, name, label, model, color, license_plate, latitude, longitude, geofence_id, created_at FROM engagements
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEngagement(ctx context.Context, id int64) (Engagement, error) {
	row := q.db.QueryRowContext(ctx, getEngagement, id)
	var i Engagement
	err := row.Scan(
		&i.ID,
		&i.DriverID,
		&i.Status,
		&i.InTrip,
		&i.VehicleID,
		&i.Name,
		&i.Label,
		&i.Model,
		&i.Color,
		&i.LicensePlate,
		&i.Latitude,
		&i.Longitude,
		&i.GeofenceID,
		&i.CreatedAt,
	)
	return i, err
}

const getEngagementDriver = `-- name: GetEngagementDriver :one
SELECT id, driver_id, status, in_trip, vehicle_id, name, label, model, color, license_plate, latitude, longitude, geofence_id, created_at FROM engagements
WHERE driver_id = $1 LIMIT 1
`

func (q *Queries) GetEngagementDriver(ctx context.Context, driverID int32) (Engagement, error) {
	row := q.db.QueryRowContext(ctx, getEngagementDriver, driverID)
	var i Engagement
	err := row.Scan(
		&i.ID,
		&i.DriverID,
		&i.Status,
		&i.InTrip,
		&i.VehicleID,
		&i.Name,
		&i.Label,
		&i.Model,
		&i.Color,
		&i.LicensePlate,
		&i.Latitude,
		&i.Longitude,
		&i.GeofenceID,
		&i.CreatedAt,
	)
	return i, err
}

const listEngagements = `-- name: ListEngagements :many
SELECT id, driver_id, status, in_trip, vehicle_id, name, label, model, color, license_plate, latitude, longitude, geofence_id, created_at FROM engagements
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListEngagementsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEngagements(ctx context.Context, arg ListEngagementsParams) ([]Engagement, error) {
	rows, err := q.db.QueryContext(ctx, listEngagements, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Engagement{}
	for rows.Next() {
		var i Engagement
		if err := rows.Scan(
			&i.ID,
			&i.DriverID,
			&i.Status,
			&i.InTrip,
			&i.VehicleID,
			&i.Name,
			&i.Label,
			&i.Model,
			&i.Color,
			&i.LicensePlate,
			&i.Latitude,
			&i.Longitude,
			&i.GeofenceID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEngagementLatLng = `-- name: UpdateEngagementLatLng :one
UPDATE engagements
SET latitude = $2, longitude = $3, geofence_id = $4
WHERE driver_id = $1
RETURNING id, driver_id, status, in_trip, vehicle_id, name, label, model, color, license_plate, latitude, longitude, geofence_id, created_at
`

type UpdateEngagementLatLngParams struct {
	DriverID   int32           `json:"driver_id"`
	Latitude   sql.NullFloat64 `json:"latitude"`
	Longitude  sql.NullFloat64 `json:"longitude"`
	GeofenceID sql.NullInt32   `json:"geofence_id"`
}

func (q *Queries) UpdateEngagementLatLng(ctx context.Context, arg UpdateEngagementLatLngParams) (Engagement, error) {
	row := q.db.QueryRowContext(ctx, updateEngagementLatLng,
		arg.DriverID,
		arg.Latitude,
		arg.Longitude,
		arg.GeofenceID,
	)
	var i Engagement
	err := row.Scan(
		&i.ID,
		&i.DriverID,
		&i.Status,
		&i.InTrip,
		&i.VehicleID,
		&i.Name,
		&i.Label,
		&i.Model,
		&i.Color,
		&i.LicensePlate,
		&i.Latitude,
		&i.Longitude,
		&i.GeofenceID,
		&i.CreatedAt,
	)
	return i, err
}

const updateEngagementStatus = `-- name: UpdateEngagementStatus :one
UPDATE engagements
SET status = $2
WHERE driver_id = $1
RETURNING id, driver_id, status, in_trip, vehicle_id, name, label, model, color, license_plate, latitude, longitude, geofence_id, created_at
`

type UpdateEngagementStatusParams struct {
	DriverID int32         `json:"driver_id"`
	Status   sql.NullInt32 `json:"status"`
}

func (q *Queries) UpdateEngagementStatus(ctx context.Context, arg UpdateEngagementStatusParams) (Engagement, error) {
	row := q.db.QueryRowContext(ctx, updateEngagementStatus, arg.DriverID, arg.Status)
	var i Engagement
	err := row.Scan(
		&i.ID,
		&i.DriverID,
		&i.Status,
		&i.InTrip,
		&i.VehicleID,
		&i.Name,
		&i.Label,
		&i.Model,
		&i.Color,
		&i.LicensePlate,
		&i.Latitude,
		&i.Longitude,
		&i.GeofenceID,
		&i.CreatedAt,
	)
	return i, err
}

const updateEngagementTrip = `-- name: UpdateEngagementTrip :one
UPDATE engagements
SET in_trip = $2
WHERE driver_id = $1
RETURNING id, driver_id, status, in_trip, vehicle_id, name, label, model, color, license_plate, latitude, longitude, geofence_id, created_at
`

type UpdateEngagementTripParams struct {
	DriverID int32         `json:"driver_id"`
	InTrip   sql.NullInt32 `json:"in_trip"`
}

func (q *Queries) UpdateEngagementTrip(ctx context.Context, arg UpdateEngagementTripParams) (Engagement, error) {
	row := q.db.QueryRowContext(ctx, updateEngagementTrip, arg.DriverID, arg.InTrip)
	var i Engagement
	err := row.Scan(
		&i.ID,
		&i.DriverID,
		&i.Status,
		&i.InTrip,
		&i.VehicleID,
		&i.Name,
		&i.Label,
		&i.Model,
		&i.Color,
		&i.LicensePlate,
		&i.Latitude,
		&i.Longitude,
		&i.GeofenceID,
		&i.CreatedAt,
	)
	return i, err
}
