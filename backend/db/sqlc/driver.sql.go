// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: driver.sql

package db

import (
	"context"
	"database/sql"
)

const createDriver = `-- name: CreateDriver :one
INSERT INTO drivers (
    phone
) VALUES (
    $1
)
RETURNING id, phone, name, login_code, year, make, model, color, license_plate, status, created_at
`

func (q *Queries) CreateDriver(ctx context.Context, phone string) (Driver, error) {
	row := q.db.QueryRowContext(ctx, createDriver, phone)
	var i Driver
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.Name,
		&i.LoginCode,
		&i.Year,
		&i.Make,
		&i.Model,
		&i.Color,
		&i.LicensePlate,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteDriver = `-- name: DeleteDriver :exec

DELETE FROM drivers
WHERE id = $1
`

// -- name: UpdateDriver :one
// UPDATE drivers
// SET name = $2
// WHERE id = $1
// RETURNING *;
func (q *Queries) DeleteDriver(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteDriver, id)
	return err
}

const getDriver = `-- name: GetDriver :one
SELECT id, phone, name, login_code, year, make, model, color, license_plate, status, created_at FROM drivers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDriver(ctx context.Context, id int64) (Driver, error) {
	row := q.db.QueryRowContext(ctx, getDriver, id)
	var i Driver
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.Name,
		&i.LoginCode,
		&i.Year,
		&i.Make,
		&i.Model,
		&i.Color,
		&i.LicensePlate,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getDriverByPhone = `-- name: GetDriverByPhone :one
SELECT id, phone, name, login_code, year, make, model, color, license_plate, status, created_at FROM drivers
WHERE phone = $1 LIMIT 1
`

func (q *Queries) GetDriverByPhone(ctx context.Context, phone string) (Driver, error) {
	row := q.db.QueryRowContext(ctx, getDriverByPhone, phone)
	var i Driver
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.Name,
		&i.LoginCode,
		&i.Year,
		&i.Make,
		&i.Model,
		&i.Color,
		&i.LicensePlate,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listDrivers = `-- name: ListDrivers :many
SELECT id, phone, name, login_code, year, make, model, color, license_plate, status, created_at FROM drivers
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListDriversParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListDrivers(ctx context.Context, arg ListDriversParams) ([]Driver, error) {
	rows, err := q.db.QueryContext(ctx, listDrivers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Driver{}
	for rows.Next() {
		var i Driver
		if err := rows.Scan(
			&i.ID,
			&i.Phone,
			&i.Name,
			&i.LoginCode,
			&i.Year,
			&i.Make,
			&i.Model,
			&i.Color,
			&i.LicensePlate,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDriverLoginCode = `-- name: UpdateDriverLoginCode :one
UPDATE drivers
SET login_code = $2
WHERE id = $1
RETURNING id, phone, name, login_code, year, make, model, color, license_plate, status, created_at
`

type UpdateDriverLoginCodeParams struct {
	ID        int64          `json:"id"`
	LoginCode sql.NullString `json:"login_code"`
}

func (q *Queries) UpdateDriverLoginCode(ctx context.Context, arg UpdateDriverLoginCodeParams) (Driver, error) {
	row := q.db.QueryRowContext(ctx, updateDriverLoginCode, arg.ID, arg.LoginCode)
	var i Driver
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.Name,
		&i.LoginCode,
		&i.Year,
		&i.Make,
		&i.Model,
		&i.Color,
		&i.LicensePlate,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
