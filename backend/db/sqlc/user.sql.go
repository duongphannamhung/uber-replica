// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    phone
) VALUES (
    $1
)
RETURNING id, name, phone, login_code, created_at
`

func (q *Queries) CreateUser(ctx context.Context, phone string) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, phone)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.LoginCode,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, phone, login_code, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.LoginCode,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, name, phone, login_code, created_at FROM users
WHERE phone = $1 LIMIT 1
`

func (q *Queries) GetUserByPhone(ctx context.Context, phone string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByPhone, phone)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.LoginCode,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserLoginCode = `-- name: UpdateUserLoginCode :one
UPDATE users
SET login_code = $2
WHERE id = $1
RETURNING id, name, phone, login_code, created_at
`

type UpdateUserLoginCodeParams struct {
	ID        int64          `json:"id"`
	LoginCode sql.NullString `json:"login_code"`
}

func (q *Queries) UpdateUserLoginCode(ctx context.Context, arg UpdateUserLoginCodeParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserLoginCode, arg.ID, arg.LoginCode)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.LoginCode,
		&i.CreatedAt,
	)
	return i, err
}
