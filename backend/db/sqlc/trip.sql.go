// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: trip.sql

package db

import (
	"context"
	"database/sql"
)

const createTrip = `-- name: CreateTrip :one
INSERT INTO trips (
    user_id,
    driver_id,
    service_type,
    departure_latitude,
    departure_longitude,
    departure_name,
    destination_latitude,
    destination_longitude,
    destination_name
) VALUES (
    $1, NULL, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, user_id, driver_id, service_type, is_started, departure_latitude, departure_longitude, departure_name, destination_latitude, destination_longitude, destination_name, driver_location_latitude, driver_location_longitude, fare, created_at
`

type CreateTripParams struct {
	UserID               int64   `json:"user_id"`
	ServiceType          int32   `json:"service_type"`
	DepartureLatitude    float64 `json:"departure_latitude"`
	DepartureLongitude   float64 `json:"departure_longitude"`
	DepartureName        string  `json:"departure_name"`
	DestinationLatitude  float64 `json:"destination_latitude"`
	DestinationLongitude float64 `json:"destination_longitude"`
	DestinationName      string  `json:"destination_name"`
}

func (q *Queries) CreateTrip(ctx context.Context, arg CreateTripParams) (Trip, error) {
	row := q.db.QueryRowContext(ctx, createTrip,
		arg.UserID,
		arg.ServiceType,
		arg.DepartureLatitude,
		arg.DepartureLongitude,
		arg.DepartureName,
		arg.DestinationLatitude,
		arg.DestinationLongitude,
		arg.DestinationName,
	)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DriverID,
		&i.ServiceType,
		&i.IsStarted,
		&i.DepartureLatitude,
		&i.DepartureLongitude,
		&i.DepartureName,
		&i.DestinationLatitude,
		&i.DestinationLongitude,
		&i.DestinationName,
		&i.DriverLocationLatitude,
		&i.DriverLocationLongitude,
		&i.Fare,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTrip = `-- name: DeleteTrip :exec

DELETE FROM trips
WHERE id = $1
`

// -- name: UpdateTrip :one
// UPDATE users
// SET name = $2
// WHERE id = $1
// RETURNING *;
func (q *Queries) DeleteTrip(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTrip, id)
	return err
}

const getTrip = `-- name: GetTrip :one
SELECT id, user_id, driver_id, service_type, is_started, departure_latitude, departure_longitude, departure_name, destination_latitude, destination_longitude, destination_name, driver_location_latitude, driver_location_longitude, fare, created_at FROM trips
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTrip(ctx context.Context, id int64) (Trip, error) {
	row := q.db.QueryRowContext(ctx, getTrip, id)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DriverID,
		&i.ServiceType,
		&i.IsStarted,
		&i.DepartureLatitude,
		&i.DepartureLongitude,
		&i.DepartureName,
		&i.DestinationLatitude,
		&i.DestinationLongitude,
		&i.DestinationName,
		&i.DriverLocationLatitude,
		&i.DriverLocationLongitude,
		&i.Fare,
		&i.CreatedAt,
	)
	return i, err
}

const listTrips = `-- name: ListTrips :many
SELECT id, user_id, driver_id, service_type, is_started, departure_latitude, departure_longitude, departure_name, destination_latitude, destination_longitude, destination_name, driver_location_latitude, driver_location_longitude, fare, created_at FROM trips
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTripsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTrips(ctx context.Context, arg ListTripsParams) ([]Trip, error) {
	rows, err := q.db.QueryContext(ctx, listTrips, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Trip{}
	for rows.Next() {
		var i Trip
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.DriverID,
			&i.ServiceType,
			&i.IsStarted,
			&i.DepartureLatitude,
			&i.DepartureLongitude,
			&i.DepartureName,
			&i.DestinationLatitude,
			&i.DestinationLongitude,
			&i.DestinationName,
			&i.DriverLocationLatitude,
			&i.DriverLocationLongitude,
			&i.Fare,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStartTrip = `-- name: UpdateStartTrip :one
UPDATE trips
SET driver_id = $2,
    service_type = $3,
    is_started = TRUE,
    driver_location_latitude = $4,
    driver_location_longitude = $5
WHERE id = $1
RETURNING id, user_id, driver_id, service_type, is_started, departure_latitude, departure_longitude, departure_name, destination_latitude, destination_longitude, destination_name, driver_location_latitude, driver_location_longitude, fare, created_at
`

type UpdateStartTripParams struct {
	ID                      int64           `json:"id"`
	DriverID                sql.NullInt32   `json:"driver_id"`
	ServiceType             int32           `json:"service_type"`
	DriverLocationLatitude  sql.NullFloat64 `json:"driver_location_latitude"`
	DriverLocationLongitude sql.NullFloat64 `json:"driver_location_longitude"`
}

func (q *Queries) UpdateStartTrip(ctx context.Context, arg UpdateStartTripParams) (Trip, error) {
	row := q.db.QueryRowContext(ctx, updateStartTrip,
		arg.ID,
		arg.DriverID,
		arg.ServiceType,
		arg.DriverLocationLatitude,
		arg.DriverLocationLongitude,
	)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DriverID,
		&i.ServiceType,
		&i.IsStarted,
		&i.DepartureLatitude,
		&i.DepartureLongitude,
		&i.DepartureName,
		&i.DestinationLatitude,
		&i.DestinationLongitude,
		&i.DestinationName,
		&i.DriverLocationLatitude,
		&i.DriverLocationLongitude,
		&i.Fare,
		&i.CreatedAt,
	)
	return i, err
}

const updateTripFare = `-- name: UpdateTripFare :one
UPDATE trips
SET fare = $2
WHERE id = $1
RETURNING id, user_id, driver_id, service_type, is_started, departure_latitude, departure_longitude, departure_name, destination_latitude, destination_longitude, destination_name, driver_location_latitude, driver_location_longitude, fare, created_at
`

type UpdateTripFareParams struct {
	ID   int64         `json:"id"`
	Fare sql.NullInt32 `json:"fare"`
}

func (q *Queries) UpdateTripFare(ctx context.Context, arg UpdateTripFareParams) (Trip, error) {
	row := q.db.QueryRowContext(ctx, updateTripFare, arg.ID, arg.Fare)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DriverID,
		&i.ServiceType,
		&i.IsStarted,
		&i.DepartureLatitude,
		&i.DepartureLongitude,
		&i.DepartureName,
		&i.DestinationLatitude,
		&i.DestinationLongitude,
		&i.DestinationName,
		&i.DriverLocationLatitude,
		&i.DriverLocationLongitude,
		&i.Fare,
		&i.CreatedAt,
	)
	return i, err
}
