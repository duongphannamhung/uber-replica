// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: trip.sql

package db

import (
	"context"
)

const createTrip = `-- name: CreateTrip :one
INSERT INTO trips (
    user_id,
    driver_id
) VALUES (
    $1, $2
)
RETURNING id, user_id, driver_id, is_started, is_completed, origin, destination, destination_name, driver_location, created_at
`

type CreateTripParams struct {
	UserID   int64 `json:"user_id"`
	DriverID int64 `json:"driver_id"`
}

func (q *Queries) CreateTrip(ctx context.Context, arg CreateTripParams) (Trip, error) {
	row := q.db.QueryRowContext(ctx, createTrip, arg.UserID, arg.DriverID)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DriverID,
		&i.IsStarted,
		&i.IsCompleted,
		&i.Origin,
		&i.Destination,
		&i.DestinationName,
		&i.DriverLocation,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTrip = `-- name: DeleteTrip :exec

DELETE FROM trips
WHERE id = $1
`

// -- name: UpdateTrip :one
// UPDATE users
// SET name = $2
// WHERE id = $1
// RETURNING *;
func (q *Queries) DeleteTrip(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTrip, id)
	return err
}

const getTrip = `-- name: GetTrip :one
SELECT id, user_id, driver_id, is_started, is_completed, origin, destination, destination_name, driver_location, created_at FROM trips
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTrip(ctx context.Context, id int64) (Trip, error) {
	row := q.db.QueryRowContext(ctx, getTrip, id)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DriverID,
		&i.IsStarted,
		&i.IsCompleted,
		&i.Origin,
		&i.Destination,
		&i.DestinationName,
		&i.DriverLocation,
		&i.CreatedAt,
	)
	return i, err
}

const listTrips = `-- name: ListTrips :many
SELECT id, user_id, driver_id, is_started, is_completed, origin, destination, destination_name, driver_location, created_at FROM trips
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTripsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTrips(ctx context.Context, arg ListTripsParams) ([]Trip, error) {
	rows, err := q.db.QueryContext(ctx, listTrips, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Trip{}
	for rows.Next() {
		var i Trip
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.DriverID,
			&i.IsStarted,
			&i.IsCompleted,
			&i.Origin,
			&i.Destination,
			&i.DestinationName,
			&i.DriverLocation,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
