// package api

// import (
// 	"database/sql"
// 	"net/http"
// 	db "uber-replica/db/sqlc"

// 	"github.com/gin-gonic/gin"
// )

// type CreateUserRequest struct {
// 	Phone string `json:"phone" binding:"required"`
// }

// func (server *Server) createUser(ctx *gin.Context) {
// 	var req CreateUserRequest
// 	if err := ctx.ShouldBindJSON(&req); err != nil {
// 		// return badrequest
// 		ctx.JSON(http.StatusBadRequest, errorResponse(err))
// 	}

// 	arg := db.CreateUserParams{
// 		Phone: req.Phone,
// 	}

// 	user, err := server.store.CreateUser(ctx, arg)
// 	if err != nil {
// 		ctx.JSON(http.StatusInternalServerError, errorResponse(err))
// 		return
// 	}

// 	ctx.JSON(http.StatusOK, user)
// }

// type getUserByPhoneRequest struct {
// 	Phone string `json:"phone" binding:"required"`
// }

// func (server *Server) getUserByPhone(ctx *gin.Context) {
// 	var req getUserByPhoneRequest
// 	if err := ctx.ShouldBindUri(&req); err != nil {
// 		ctx.JSON(http.StatusBadRequest, errorResponse(err))
// 		return
// 	}

// 	user, err := server.store.GetUserByPhone(ctx, req.Phone)
// 	if err != nil {
// 		if err == sql.ErrNoRows {
// 			ctx.JSON(http.StatusNotFound, errorResponse(err))
// 			return
// 		}
// 		ctx.JSON(http.StatusInternalServerError, errorResponse(err))
// 		return
// 	}

// 	ctx.JSON(http.StatusOK, user)
// }

// type loginUserRequest struct {
// 	Phone string `json:"phone" binding:"required"`
// 	OTP   string `json:"otp" binding:"required"`
// }

// type loginUserResponse struct {
// 	AccessToken string       `json:access_token`
// 	User        userResponse `json:user`
// }

// func (server *Server) loginUser(ctx *gin.Context) {
// 	var req loginUserRequest
// 	if err := ctx.ShouldBindJSON(&req); err != nil {
// 		ctx.JSON(http.StatusBadRequest, errorResponse(err))
// 		return
// 	}

// 	user, err := server.store.GetUserByPhone(ctx, req.Phone)
// 	if err != nil {
// 		if err == sql.ErrNoRows {
// 			ctx.JSON(http.StatusNotFound, errorResponse(err))
// 			return
// 		}
// 		ctx.JSON(http.StatusInternalServerError, errorResponse(err))
// 		return
// 	}

// 	if user.LoginCode.String != req.OTP {
// 		ctx.JSON(http.StatusUnauthorized, errorResponse(err))
// 		return
// 	}
// 	if err != nil {
// 		ctx.JSON(http.StatusUnauthorized, errorResponse(err))
// 	}

// 	accessToken, err := server.tokenMaker.CreateToken(user.Phone, server.config.AccessTokenDuration)
// 	if err != nil {
// 		ctx.JSON(http.StatusInternalServerError, errorResponse(err))
// 		return
// 	}

// 	resp := loginUserResponse{
// 		AccessToken: accessToken,
// 		User:        newUserResponse(user),
// 	}
// }
